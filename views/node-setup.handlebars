<section class="step" id="node-setup">
    <h1>1. Set up Node</h1>
    <p>Stripe requires front-end and back-end HTTP calls, so we'll need a bare-bones application. We assume you're using a Linux command line or similar, but if that's not the case, adapting our commands probably won't be too difficult. We're mostly just using the terminal to create files and folders.</p>
    <p>Run the following commands in your terminal to create some files and folders for the application:</p>
    <pre>cd
mkdir stripe_app
cd stripe_app
touch app.js
npm init
npm install body-parser express express-handlebars request --save
mkdir views
mkdir views/layouts
</pre>
  <p>Add the following code to <code>~/stripe_app/app.js</code>. It's all boilerplate -- nothing too exciting.</p>
  <pre>var express = require('express');
var app = express();

// HTTP request library
var request = require('request');

// Handlebars templating
var handlebars = require('express-handlebars').create({defaultLayout: 'main'});
app.engine('handlebars', handlebars.engine);
app.set('view engine', 'handlebars');

// Port and static handling
app.set('port', 8888);
var path = require('path');
app.use(express.static(path.join(__dirname, 'public')));

// Parsing for POST requests
var bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());

// ROUTES WILL GO HERE

// Listen on designated port
app.listen(app.get('port'), function() {
  console.log('Express started on http://localhost:' + app.get('port') + '; press Ctrl+C to terminate.');
});
  </pre>
  <p>Verify that your application runs without errors:</p>
  <pre>cd ~/stripe_app
node app.js</pre>
  <p>Then you can go ahead and stop the app (Ctrl+C).</p>
</section>