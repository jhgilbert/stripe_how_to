<section class="step" id="create-charge">
  <h1>6. Create a charge</h1>
  <p>Now that our front end is set up to retrieve a token from Stripe, we need to create a back end route to accept that token and use it to create a charge by contacting the Stripe API.</p>
  <p><strong>The front end of our application does not send credit-card information to our back end. It just sends the token.</strong> Credit card information should never hit our server, or we could be in lots of legal trouble!</p>
  <p>Add a route to <code>~/stripe_app/app.js</code>:</p>
  <pre>app.post('/submit_payment', function(req, res) {
  // * IMPORTANT WARNING *
  // this is a test key -- never check a real server-side key into
  // a public GitHub repo!
  var stripe_api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2';

  // create a charge object
  var charge = {
    amount: 1000,
    currency: 'usd',
    source: req.body.token
  };

  var postObj = {
    url: 'https://api.stripe.com/v1/charges',
    headers: {'Authorization': 'Bearer ' + stripe_api_key},
    form: charge
  };

  // send the charge to Stripe
  request(postObj, function(error, response, body) {
    res.send(response.body);
  });
});</pre>
  <p>This route accepts a Stripe-created token object (originally requested by, and then forwarded by, the front end), then submits that token to the Stripe API, along with the amount of the charge and the type of currency.</p>
  <p>The route first creates a charge object, giving the object an amount (we've gone with ten dollars but you're welcome to change it) and a currency. Notice that the <code>source</code> of the charge object is set to the token that was forwarded from the front end.</p>
  <p>Notice that our HTTP request to Stripe includes an authorization header and uses our Stripe API key. We're just using test API keys, but this is where our super-secret Stripe API key would live. <strong>If anyone else got ahold of this key, they could steal all of our money from our Stripe account! That's why you never check secret keys into a public GitHub repo.</strong> That's also why the front end doesn't make this HTTP request. It's too sensitive and must be made on the back end.</p>
  <p>Now we need a function in <code>~/stripe_app/public/scripts/diy_stripe.js</code> that will send the Stripe token to the <code>/submit_payment</code> route we just created:</p>
  <pre>
// submit Stripe-provided token to back end
// (runs when token has been acquired)

function submitToken(tokenObj) {
  console.log("Forwarding Stripe token to our back end ...");
  var req = new XMLHttpRequest();
  req.open("POST", "/submit_payment", true);
  req.addEventListener("load", function() {
    console.log("Response to back end from Stripe after charge is created:")
    console.log(JSON.parse(req.responseText));   
  });
  req.send(JSON.stringify({token: tokenObj.id}));
};</pre>
  <p>This function accepts a token object as a parameter, then sends that token to our back end route that will finalize the credit-card charge. The function also prints the results of the transaction to the console, just for our informational purposes. Normally you wouldn't want to send sensitive back end data to the front end for printing -- you would just print it to the server console directly from your <code>app.js</code> file. But this is all just test data, so it's safe for now.</p>
  <p>Now, we need to call this new function. In <code>diy_stripe.js</code>, replace</p>
  <pre>// WE WILL SUBMIT TOKEN TO THE BACK END HERE</pre>
  <p>with</p>
  <pre>submitToken(response);</pre>
  <p>If you restart your app, fill out the form, and submit the transaction, you should now see the complete process unfold in the console: we request a token from the front end, Stripe sends it, we forward the token to the back end, and the back end uses that token to create a transaction and receive a list of charges back from Stripe.
</section>